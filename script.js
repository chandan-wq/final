require('dotenv').config();
const express = require('express');
const axios = require('axios');
const multer = require('multer');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

const app = express();
const upload = multer({ dest: 'uploads/' });
app.use(express.json());

// Rate limiting
const rateLimit = require('express-rate-limit');
const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100 });
app.use(limiter);

// 1. AI Answer Endpoint (OpenAI)
app.post('/api/ai-answer', async (req, res) => {
  try {
    const { question, subject, grade } = req.body;
    
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `You are a ${subject} tutor for grade ${grade}. 
                      Provide step-by-step explanations in simple terms.`
          },
          { role: "user", content: question }
        ],
        temperature: 0.7
      },
      { headers: { 'Authorization': `Bearer ${process.env.OPENAI_KEY}` } }
    );

    res.json({
      solution: response.data.choices[0].message.content,
      explanation: "Detailed explanation generated by AI",
      resources: []
    });
  } catch (error) {
    console.error("AI Error:", error);
    res.status(500).json({ error: "AI processing failed" });
  }
});

// 2. Math Image Processing (Mathpix)
app.post('/api/process-math-image', upload.single('image'), async (req, res) => {
  try {
    const form = new FormData();
    form.append('file', fs.createReadStream(req.file.path));
    
    const response = await axios.post('https://api.mathpix.com/v3/text', form, {
      headers: {
        'app_id': process.env.MATHPIX_ID,
        'app_key': process.env.MATHPIX_KEY,
        ...form.getHeaders()
      }
    });

    fs.unlinkSync(req.file.path); // Clean up uploaded file
    res.json({ text: response.data.text });
  } catch (error) {
    console.error("Mathpix Error:", error);
    res.status(500).json({ error: "Image processing failed" });
  }
});

// 3. Speech-to-Text (AssemblyAI)
app.post('/api/transcribe-audio', upload.single('audio'), async (req, res) => {
  try {
    // 1. Upload audio file
    const audioData = fs.readFileSync(req.file.path);
    const uploadResponse = await axios.post(
      'https://api.assemblyai.com/v2/upload',
      audioData,
      { headers: { 'Authorization': process.env.ASSEMBLYAI_KEY } }
    );

    // 2. Start transcription
    const transcriptResponse = await axios.post(
      'https://api.assemblyai.com/v2/transcript',
      { audio_url: uploadResponse.data.upload_url },
      { headers: { 'Authorization': process.env.ASSEMBLYAI_KEY } }
    );

    // 3. Poll for results
    let transcript;
    while (true) {
      const result = await axios.get(
        `https://api.assemblyai.com/v2/transcript/${transcriptResponse.data.id}`,
        { headers: { 'Authorization': process.env.ASSEMBLYAI_KEY } }
      );
      
      if (result.data.status === 'completed') {
        transcript = result.data.text;
        break;
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    fs.unlinkSync(req.file.path); // Clean up
    res.json({ transcript });
  } catch (error) {
    console.error("Transcription Error:", error);
    res.status(500).json({ error: "Audio processing failed" });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something broke!' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));